[{"path":"http://christophertkenny.com/dots/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 dots authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://christophertkenny.com/dots/articles/making_dot_density_maps.html","id":"the-dots-package","dir":"Articles","previous_headings":"","what":"The dots Package","title":"Making Dot Density Maps","text":"Dot density maps useful display relative distribution people across geographies. maps often used election research litigation highlight distribution voters choropleths tell different story. dots simplifies process, allowing tidy, simple interface. Maps can created automatically dots::dots(). points behind maps can generated dots::dots_points(). Now, various methods creating random points exist different R ecosystems, notably terra, sf, sp. different inputs produce completely different outputs. standardize one interface, dots creates set wrapper engine_* functions. engine_* function takes arguments: shp col. Shape sf tibble col string name column shp. Within engine functions, additional work done standardize outputs largely comparable.","code":""},{"path":"http://christophertkenny.com/dots/articles/making_dot_density_maps.html","id":"making-dot-density-maps","dir":"Articles","previous_headings":"","what":"Making Dot Density Maps","title":"Making Dot Density Maps","text":"make dot density map, need shapefile populations, votes, numeric attribute tied geography. , load 2020 Census data Suffolk County, MA, included dots package. make basic dot density map Hispanic voting age population, can run following: works vap_hisp numeric column suffolk. numeric column work. can even use multiple columns. cols uses tidyselect select multiple columns. example, make map using White Hispanic voting age population, following: Now, points bit crowded, can raise number adults point stands increasing divisor argument. default 250, raise 1250. color dots uses color aesthetic, can change using different scale_color functions: Now, kind bland, ggplot output, can update using regular tools. example, can clean background give clearer labels. downside using automatic plot generated dots::dots() limits us plot defaults. switch dots::dots_points(), can make specific choices generating plot. make basic plot, run following: , can customize additional aspects , using ggplot2 functions.","code":"data(\"suffolk\") dots::dots(shp = suffolk, cols = vap_hisp) dots::dots(shp = suffolk, cols = c(vap_hisp, vap_white)) dots::dots(shp = suffolk, cols = c(vap_hisp, vap_white), divisor = 1250) dots::dots(shp = suffolk, cols = c(vap_hisp, vap_white), divisor = 1250) +   scale_color_brewer(name = 'Race/Ethnicity', palette = 'Accent') dots::dots(shp = suffolk, cols = c(vap_hisp, vap_white), divisor = 1250) +   scale_color_brewer(name = 'Race/Ethnicity', palette = 'Accent') +    labs(     title = 'White and Hispanic Adults in Suffolk County, MA',     caption = 'One point per 1250 adults.'   ) +    theme_void() dots::dots_points(shp = suffolk, cols = c(vap_hisp, vap_white), divisor = 1250)  %>%    ggplot() +   geom_sf(data = suffolk, fill = NA, color = 'black') +   geom_sf(aes(color = dots_type)) +   scale_color_brewer(name = 'Race/Ethnicity', palette = 'Accent') +    labs(     title = 'White and Hispanic Adults in Suffolk County, MA',     caption = 'One point per 1250 adults.'   ) +    theme_void() dots::dots_points(shp = suffolk, cols = c(vap_hisp, vap_white), divisor = 1250)  %>%    dplyr::mutate(dots_type = dplyr::case_when(     dots_type == 'vap_white' ~ 'White',     dots_type == 'vap_hisp' ~ 'Hispanic'   )) %>%    ggplot() +   geom_sf(data = suffolk, fill = NA, color = 'black') +    geom_sf(aes(color = dots_type), size = 0.75) + # change size   scale_color_brewer(name = 'Race/Ethnicity', palette = 'Accent') +    labs(     title = 'White and Hispanic Adults in Suffolk County, MA',     caption = 'One point per 1250 adults.'   ) +    theme_void()"},{"path":"http://christophertkenny.com/dots/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher T. Kenny. Author, maintainer.","code":""},{"path":"http://christophertkenny.com/dots/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kenny C (2022). dots: Dot Density Maps. https://github.com/christopherkenny/dots, http://christophertkenny.com/dots/.","code":"@Manual{,   title = {dots: Dot Density Maps},   author = {Christopher T. Kenny},   year = {2022},   note = {https://github.com/christopherkenny/dots, http://christophertkenny.com/dots/}, }"},{"path":"http://christophertkenny.com/dots/index.html","id":"dots-","dir":"","previous_headings":"","what":"Dot Density Maps","title":"Dot Density Maps","text":"dots provides tools make dot density maps.","code":""},{"path":"http://christophertkenny.com/dots/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dot Density Maps","text":"can install development version dots GitHub :","code":"remotes::install_github('christopherkenny/dots')"},{"path":"http://christophertkenny.com/dots/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Dot Density Maps","text":"main function dots dots(). can also use dots_points() make randomized points.","code":"library(dots) library(sf) #> Linking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE library(ggplot2) data('suffolk') dots::dots(suffolk, c(pop_black, pop_white), divisor = 1000) +    scale_color_viridis_d() +    theme_void() dots::dots_points(suffolk, c(pop_black, pop_white), divisor = 1000) |>    ggplot() +    geom_sf(data = suffolk) +    geom_sf(aes(color = dots_type)) +    scale_color_viridis_d() +    theme_void()"},{"path":"http://christophertkenny.com/dots/reference/boston_water.html","id":null,"dir":"Reference","previous_headings":"","what":"Boston Water — boston_water","title":"Boston Water — boston_water","text":"data contains largest named water within Suffolk County MA, geographies simplified.","code":""},{"path":"http://christophertkenny.com/dots/reference/boston_water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boston Water — boston_water","text":"","code":"data(\"boston_water\")"},{"path":"http://christophertkenny.com/dots/reference/boston_water.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Boston Water — boston_water","text":"sf dataframe 10 observations","code":""},{"path":"http://christophertkenny.com/dots/reference/boston_water.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boston Water — boston_water","text":"","code":"data('boston_water')"},{"path":"http://christophertkenny.com/dots/reference/clip_water.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Water — clip_water","title":"Remove Water — clip_water","text":"Remove Water","code":""},{"path":"http://christophertkenny.com/dots/reference/clip_water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Water — clip_water","text":"","code":"clip_water(shp, water, filter_islands = FALSE, ...)"},{"path":"http://christophertkenny.com/dots/reference/clip_water.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Water — clip_water","text":"shp input shp sf geometry. water water shapes remove sf geometry filter_islands logical. additional filtering done remove small areas? ... additional arguments pass rmapshaper::ms_filter_islands(). used filter_islands = TRUE.","code":""},{"path":"http://christophertkenny.com/dots/reference/clip_water.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Water — clip_water","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/clip_water.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Water — clip_water","text":"","code":"# \\donttest{ # time to run varies greatly, depending on machine data(suffolk) data(boston_water) clip_water(suffolk, boston_water[10, ]) #> Registered S3 method overwritten by 'geojsonlint': #>   method         from  #>   print.location dplyr #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Simple feature collection with 295 features and 22 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -7924935 ymin: 5195183 xmax: -7898484 ymax: 5228645 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                                          NAME #> 1  25025000587 Chelsea City Ward 3 Precinct 4, Suffolk County, Massachusetts #> 2  25025001605                           1605, Suffolk County, Massachusetts #> 3  25025000511                           0511, Suffolk County, Massachusetts #> 4  25025000609                           0609, Suffolk County, Massachusetts #> 5  25025002002                           2002, Suffolk County, Massachusetts #> 6  25025001106                           1106, Suffolk County, Massachusetts #> 7  25025002012                           2012, Suffolk County, Massachusetts #> 8  25025001610                           1610, Suffolk County, Massachusetts #> 9  25025000506                           0506, Suffolk County, Massachusetts #> 10 25025000577 Chelsea City Ward 1 Precinct 2, Suffolk County, Massachusetts #>     pop pop_white pop_black pop_hisp pop_aian pop_asian pop_nhpi pop_other #> 1  2608       469       169     1818        1        57        0        29 #> 2  2315       879       483      284        4       487        0        36 #> 3  1517      1278        25       83        0        56        0         7 #> 4  1842      1721        11       55        1        29        0         3 #> 5  2421      1441       254      478        4       117        0        24 #> 6  1594       757       163      485        0        84        0        26 #> 7  1387      1114        40      103        0        76        0         4 #> 8  2179      1445       220      146        4       260        0        24 #> 9  2500      1905       113      214        4       172        0        19 #> 10 2151       152        82     1846        0        21        1        28 #>    pop_two  vap vap_white vap_black vap_hisp vap_aian vap_asian vap_nhpi #> 1       65 1949       403       139     1288        0        54        0 #> 2      142 1841       790       338      187        4       385        0 #> 3       68 1387      1176        25       72        0        51        0 #> 4       22 1634      1525        11       47        0        29        0 #> 5      103 1967      1212       203      357        4        99        0 #> 6       79 1374       689       140      384        0        82        0 #> 7       50 1131       933        26       71        0        60        0 #> 8       80 1827      1252       188      106        4       206        0 #> 9       73 2340      1793       111      201        4       157        0 #> 10      21 1532       117        63     1306        0        16        1 #>    vap_other vap_two             name   area                       geometry #> 1         17      48 Little Mystic Ch 575502 MULTIPOLYGON (((-7908235 52... #> 2         29     108 Little Mystic Ch 575502 MULTIPOLYGON (((-7910238 52... #> 3          6      57 Little Mystic Ch 575502 MULTIPOLYGON (((-7912112 52... #> 4          3      19 Little Mystic Ch 575502 MULTIPOLYGON (((-7906938 52... #> 5         20      72 Little Mystic Ch 575502 MULTIPOLYGON (((-7919230 52... #> 6         26      53 Little Mystic Ch 575502 MULTIPOLYGON (((-7915414 52... #> 7          4      37 Little Mystic Ch 575502 MULTIPOLYGON (((-7921513 52... #> 8         13      58 Little Mystic Ch 575502 MULTIPOLYGON (((-7909414 52... #> 9         17      57 Little Mystic Ch 575502 MULTIPOLYGON (((-7912518 52... #> 10        12      17 Little Mystic Ch 575502 MULTIPOLYGON (((-7907995 52... # }"},{"path":"http://christophertkenny.com/dots/reference/dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dot density plots — dots","title":"Make dot density plots — dots","text":"Make dot density plots","code":""},{"path":"http://christophertkenny.com/dots/reference/dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dot density plots — dots","text":"","code":"dots(   shp,   cols,   engine = engine_terra,   divisor = 250,   min_point = 0.1 * divisor )"},{"path":"http://christophertkenny.com/dots/reference/dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dot density plots — dots","text":"shp input shp sf geometry. cols <tidy-select> columns produce dots . engine backend use. Default engine_terra. divisor Number people per dot. Default 250. min_point Minimum number people generate one dot. Defaults 10% divisor.","code":""},{"path":"http://christophertkenny.com/dots/reference/dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dot density plots — dots","text":"ggplot","code":""},{"path":"http://christophertkenny.com/dots/reference/dots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make dot density plots — dots","text":"","code":"data('suffolk') # subset to first 20 rows for speed on CRAN dots(suffolk[1:20, ], c(vap_black), divisor = 2000)"},{"path":"http://christophertkenny.com/dots/reference/dots_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dot density points — dots_points","title":"Make dot density points — dots_points","text":"Make dot density points","code":""},{"path":"http://christophertkenny.com/dots/reference/dots_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dot density points — dots_points","text":"","code":"dots_points(   shp,   cols,   engine = engine_terra,   divisor = 250,   min_point = 0.1 * divisor )"},{"path":"http://christophertkenny.com/dots/reference/dots_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dot density points — dots_points","text":"shp input shp sf geometry. cols <tidy-select> columns produce dots . engine backend use. Default engine_terra. divisor Number people per dot. Default 250. min_point Minimum number people generate one dot. Defaults 10% divisor.","code":""},{"path":"http://christophertkenny.com/dots/reference/dots_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dot density points — dots_points","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/dots_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make dot density points — dots_points","text":"","code":"data('suffolk') # subset to first 20 rows for speed on CRAN dots_points(suffolk[1:20, ], c(vap_black)) #> Simple feature collection with 35 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7921078 ymin: 5200238 xmax: -7903487 ymax: 5221927 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>    vap_black dots_type                 geometry #> 1          1 vap_black POINT (-7907649 5221043) #> 2          2 vap_black POINT (-7909358 5205065) #> 3          2 vap_black POINT (-7909137 5205020) #> 4          1 vap_black POINT (-7918143 5204012) #> 5          1 vap_black POINT (-7915229 5207878) #> 6          1 vap_black POINT (-7921078 5203911) #> 7          1 vap_black POINT (-7908443 5204187) #> 8          1 vap_black POINT (-7911902 5214244) #> 9          1 vap_black POINT (-7907793 5219046) #> 10         3 vap_black POINT (-7913828 5208537)"},{"path":"http://christophertkenny.com/dots/reference/engine_sf_hexagonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hexagonal Points with sf — engine_sf_hexagonal","title":"Generate Hexagonal Points with sf — engine_sf_hexagonal","text":"Uses sf::st_sample() produce points spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_hexagonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hexagonal Points with sf — engine_sf_hexagonal","text":"","code":"engine_sf_hexagonal(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sf_hexagonal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hexagonal Points with sf — engine_sf_hexagonal","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_hexagonal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hexagonal Points with sf — engine_sf_hexagonal","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_hexagonal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Hexagonal Points with sf — engine_sf_hexagonal","text":"","code":"set.seed(1) data('suffolk') engine_sf_hexagonal(suffolk[16:20,], 'pop_nhpi') #> Simple feature collection with 20 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7913815 ymin: 5205934 xmax: -7908374 ymax: 5212464 #> Projected CRS: WGS 84 / Pseudo-Mercator #> # A tibble: 20 × 22 #>    GEOID    NAME    pop pop_white pop_black pop_hisp pop_aian pop_asian pop_nhpi #>    <chr>    <chr> <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>    <dbl> #>  1 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  2 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  3 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  4 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  5 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  6 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  7 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  8 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  9 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 10 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 11 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 12 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 13 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 14 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 15 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 16 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 17 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 18 2502500… 0604…  2371      2024        16       94        3       147        2 #> 19 2502500… 0604…  2371      2024        16       94        3       147        2 #> 20 2502500… 1207…  4337       163      2237     1695        7        33        1 #> # … with 13 more variables: pop_other <dbl>, pop_two <dbl>, vap <dbl>, #> #   vap_white <dbl>, vap_black <dbl>, vap_hisp <dbl>, vap_aian <dbl>, #> #   vap_asian <dbl>, vap_nhpi <dbl>, vap_other <dbl>, vap_two <dbl>, #> #   dots_type <chr>, geometry <POINT [m]>"},{"path":"http://christophertkenny.com/dots/reference/engine_sf_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Points with sf — engine_sf_random","title":"Generate Random Points with sf — engine_sf_random","text":"Uses sf::st_sample() produce points spatial joins input shp. engine function takes arguments produces comparable outputs.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Points with sf — engine_sf_random","text":"","code":"engine_sf_random(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sf_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Points with sf — engine_sf_random","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Random Points with sf — engine_sf_random","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Random Points with sf — engine_sf_random","text":"","code":"set.seed(1) data('suffolk') engine_sf_random(suffolk[16:20,], 'pop_nhpi') #> Simple feature collection with 20 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914491 ymin: 5206444 xmax: -7908131 ymax: 5212574 #> Projected CRS: WGS 84 / Pseudo-Mercator #> # A tibble: 20 × 22 #>    GEOID    NAME    pop pop_white pop_black pop_hisp pop_aian pop_asian pop_nhpi #>    <chr>    <chr> <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>    <dbl> #>  1 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  2 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  3 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  4 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  5 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  6 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  7 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  8 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  9 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 10 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 11 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 12 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 13 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 14 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 15 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 16 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 17 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 18 2502500… 0604…  2371      2024        16       94        3       147        2 #> 19 2502500… 0604…  2371      2024        16       94        3       147        2 #> 20 2502500… 1207…  4337       163      2237     1695        7        33        1 #> # … with 13 more variables: pop_other <dbl>, pop_two <dbl>, vap <dbl>, #> #   vap_white <dbl>, vap_black <dbl>, vap_hisp <dbl>, vap_aian <dbl>, #> #   vap_asian <dbl>, vap_nhpi <dbl>, vap_other <dbl>, vap_two <dbl>, #> #   dots_type <chr>, geometry <POINT [m]>"},{"path":"http://christophertkenny.com/dots/reference/engine_sf_regular.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Regular Points with sf — engine_sf_regular","title":"Generate Regular Points with sf — engine_sf_regular","text":"Uses sf::st_sample() produce points spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_regular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Regular Points with sf — engine_sf_regular","text":"","code":"engine_sf_regular(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sf_regular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Regular Points with sf — engine_sf_regular","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_regular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Regular Points with sf — engine_sf_regular","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sf_regular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Regular Points with sf — engine_sf_regular","text":"","code":"set.seed(1) data('suffolk') engine_sf_regular(suffolk[16:20,], 'pop_nhpi') #> Simple feature collection with 22 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914844 ymin: 5205801 xmax: -7908374 ymax: 5212512 #> Projected CRS: WGS 84 / Pseudo-Mercator #> # A tibble: 22 × 22 #>    GEOID    NAME    pop pop_white pop_black pop_hisp pop_aian pop_asian pop_nhpi #>    <chr>    <chr> <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>    <dbl> #>  1 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  2 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  3 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  4 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  5 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  6 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  7 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  8 2502500… 0408…  5671      3212       467      572        1      1131       17 #>  9 2502500… 0408…  5671      3212       467      572        1      1131       17 #> 10 2502500… 0408…  5671      3212       467      572        1      1131       17 #> # … with 12 more rows, and 13 more variables: pop_other <dbl>, pop_two <dbl>, #> #   vap <dbl>, vap_white <dbl>, vap_black <dbl>, vap_hisp <dbl>, #> #   vap_aian <dbl>, vap_asian <dbl>, vap_nhpi <dbl>, vap_other <dbl>, #> #   vap_two <dbl>, dots_type <chr>, geometry <POINT [m]>"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_clustered.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Clustered Points with sp — engine_sp_clustered","title":"Generate Clustered Points with sp — engine_sp_clustered","text":"Uses sp::spsample() method \"clustered\" produce points, converts back sf, spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_clustered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Clustered Points with sp — engine_sp_clustered","text":"","code":"engine_sp_clustered(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_clustered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Clustered Points with sp — engine_sp_clustered","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_clustered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Clustered Points with sp — engine_sp_clustered","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_clustered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Clustered Points with sp — engine_sp_clustered","text":"","code":"set.seed(1) data('suffolk') engine_sp_clustered(suffolk[16:20, ], 'pop_nhpi') #> Simple feature collection with 15 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914015 ymin: 5207130 xmax: -7908316 ymax: 5212516 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                NAME  pop pop_white pop_black #> 1  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 2  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 3  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 4  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 5  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 6  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 7  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 8  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 9  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 10 25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #>    pop_hisp pop_aian pop_asian pop_nhpi pop_other pop_two  vap vap_white #> 1       572        1      1131       17        29     242 5527      3177 #> 2       572        1      1131       17        29     242 5527      3177 #> 3       572        1      1131       17        29     242 5527      3177 #> 4       572        1      1131       17        29     242 5527      3177 #> 5       572        1      1131       17        29     242 5527      3177 #> 6       572        1      1131       17        29     242 5527      3177 #> 7       572        1      1131       17        29     242 5527      3177 #> 8       572        1      1131       17        29     242 5527      3177 #> 9       572        1      1131       17        29     242 5527      3177 #> 10      572        1      1131       17        29     242 5527      3177 #>    vap_black vap_hisp vap_aian vap_asian vap_nhpi vap_other vap_two dots_type #> 1        439      531        1      1102       17        28     232  pop_nhpi #> 2        439      531        1      1102       17        28     232  pop_nhpi #> 3        439      531        1      1102       17        28     232  pop_nhpi #> 4        439      531        1      1102       17        28     232  pop_nhpi #> 5        439      531        1      1102       17        28     232  pop_nhpi #> 6        439      531        1      1102       17        28     232  pop_nhpi #> 7        439      531        1      1102       17        28     232  pop_nhpi #> 8        439      531        1      1102       17        28     232  pop_nhpi #> 9        439      531        1      1102       17        28     232  pop_nhpi #> 10       439      531        1      1102       17        28     232  pop_nhpi #>                    geometry #> 1  POINT (-7913687 5211506) #> 2  POINT (-7913692 5211467) #> 3  POINT (-7913735 5211498) #> 4  POINT (-7913715 5211454) #> 5  POINT (-7913677 5211520) #> 6  POINT (-7913755 5211442) #> 7  POINT (-7913734 5211529) #> 8  POINT (-7913735 5211451) #> 9  POINT (-7913742 5211484) #> 10 POINT (-7913716 5211504)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_hexagonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hexagonal Points with sp — engine_sp_hexagonal","title":"Generate Hexagonal Points with sp — engine_sp_hexagonal","text":"Uses sp::spsample() method \"hexagonal\" produce points, converts back sf, spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_hexagonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hexagonal Points with sp — engine_sp_hexagonal","text":"","code":"engine_sp_hexagonal(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_hexagonal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hexagonal Points with sp — engine_sp_hexagonal","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_hexagonal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hexagonal Points with sp — engine_sp_hexagonal","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_hexagonal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Hexagonal Points with sp — engine_sp_hexagonal","text":"","code":"set.seed(1) data('suffolk') engine_sp_hexagonal(suffolk[16:20, ], 'pop_nhpi') #> Simple feature collection with 16 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914225 ymin: 5207278 xmax: -7908200 ymax: 5212673 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                NAME  pop pop_white pop_black #> 1  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 2  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 3  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 4  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 5  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 6  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 7  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 8  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 9  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 10 25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #>    pop_hisp pop_aian pop_asian pop_nhpi pop_other pop_two  vap vap_white #> 1       572        1      1131       17        29     242 5527      3177 #> 2       572        1      1131       17        29     242 5527      3177 #> 3       572        1      1131       17        29     242 5527      3177 #> 4       572        1      1131       17        29     242 5527      3177 #> 5       572        1      1131       17        29     242 5527      3177 #> 6       572        1      1131       17        29     242 5527      3177 #> 7       572        1      1131       17        29     242 5527      3177 #> 8       572        1      1131       17        29     242 5527      3177 #> 9       572        1      1131       17        29     242 5527      3177 #> 10      572        1      1131       17        29     242 5527      3177 #>    vap_black vap_hisp vap_aian vap_asian vap_nhpi vap_other vap_two dots_type #> 1        439      531        1      1102       17        28     232  pop_nhpi #> 2        439      531        1      1102       17        28     232  pop_nhpi #> 3        439      531        1      1102       17        28     232  pop_nhpi #> 4        439      531        1      1102       17        28     232  pop_nhpi #> 5        439      531        1      1102       17        28     232  pop_nhpi #> 6        439      531        1      1102       17        28     232  pop_nhpi #> 7        439      531        1      1102       17        28     232  pop_nhpi #> 8        439      531        1      1102       17        28     232  pop_nhpi #> 9        439      531        1      1102       17        28     232  pop_nhpi #> 10       439      531        1      1102       17        28     232  pop_nhpi #>                    geometry #> 1  POINT (-7913645 5211519) #> 2  POINT (-7913546 5211691) #> 3  POINT (-7913645 5211863) #> 4  POINT (-7913446 5211863) #> 5  POINT (-7913546 5212035) #> 6  POINT (-7913347 5212035) #> 7  POINT (-7913645 5212207) #> 8  POINT (-7913446 5212207) #> 9  POINT (-7913248 5212207) #> 10 POINT (-7913049 5212207)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_nonaligned.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nonaligned Points with sp — engine_sp_nonaligned","title":"Generate Nonaligned Points with sp — engine_sp_nonaligned","text":"Uses sp::spsample() method \"nonaligned\" produce points, converts back sf, spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_nonaligned.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nonaligned Points with sp — engine_sp_nonaligned","text":"","code":"engine_sp_nonaligned(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_nonaligned.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nonaligned Points with sp — engine_sp_nonaligned","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_nonaligned.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Nonaligned Points with sp — engine_sp_nonaligned","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_nonaligned.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Nonaligned Points with sp — engine_sp_nonaligned","text":"","code":"set.seed(1) data('suffolk') engine_sp_nonaligned(suffolk[16:20, ], 'pop_nhpi') #> Simple feature collection with 18 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914397 ymin: 5207088 xmax: -7908196 ymax: 5212439 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                NAME  pop pop_white pop_black #> 1  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 2  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 3  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 4  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 5  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 6  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 7  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 8  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 9  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 10 25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #>    pop_hisp pop_aian pop_asian pop_nhpi pop_other pop_two  vap vap_white #> 1       572        1      1131       17        29     242 5527      3177 #> 2       572        1      1131       17        29     242 5527      3177 #> 3       572        1      1131       17        29     242 5527      3177 #> 4       572        1      1131       17        29     242 5527      3177 #> 5       572        1      1131       17        29     242 5527      3177 #> 6       572        1      1131       17        29     242 5527      3177 #> 7       572        1      1131       17        29     242 5527      3177 #> 8       572        1      1131       17        29     242 5527      3177 #> 9       572        1      1131       17        29     242 5527      3177 #> 10      572        1      1131       17        29     242 5527      3177 #>    vap_black vap_hisp vap_aian vap_asian vap_nhpi vap_other vap_two dots_type #> 1        439      531        1      1102       17        28     232  pop_nhpi #> 2        439      531        1      1102       17        28     232  pop_nhpi #> 3        439      531        1      1102       17        28     232  pop_nhpi #> 4        439      531        1      1102       17        28     232  pop_nhpi #> 5        439      531        1      1102       17        28     232  pop_nhpi #> 6        439      531        1      1102       17        28     232  pop_nhpi #> 7        439      531        1      1102       17        28     232  pop_nhpi #> 8        439      531        1      1102       17        28     232  pop_nhpi #> 9        439      531        1      1102       17        28     232  pop_nhpi #> 10       439      531        1      1102       17        28     232  pop_nhpi #>                    geometry #> 1  POINT (-7913644 5211554) #> 2  POINT (-7913594 5211751) #> 3  POINT (-7913646 5211899) #> 4  POINT (-7913474 5211923) #> 5  POINT (-7913302 5211918) #> 6  POINT (-7913638 5212071) #> 7  POINT (-7913466 5212095) #> 8  POINT (-7913294 5212090) #> 9  POINT (-7913122 5212178) #> 10 POINT (-7913687 5212243)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Points with sp — engine_sp_random","title":"Generate Random Points with sp — engine_sp_random","text":"Uses sp::spsample() method \"random\" produce points, converts back sf, spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Points with sp — engine_sp_random","text":"","code":"engine_sp_random(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Points with sp — engine_sp_random","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Random Points with sp — engine_sp_random","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Random Points with sp — engine_sp_random","text":"","code":"set.seed(1) data('suffolk') engine_sp_random(suffolk[16:20,], 'pop_nhpi') #> Simple feature collection with 22 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914948 ymin: 5206728 xmax: -7907975 ymax: 5212579 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                NAME  pop pop_white pop_black #> 1  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 2  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 3  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 4  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 5  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 6  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 7  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 8  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 9  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 10 25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #>    pop_hisp pop_aian pop_asian pop_nhpi pop_other pop_two  vap vap_white #> 1       572        1      1131       17        29     242 5527      3177 #> 2       572        1      1131       17        29     242 5527      3177 #> 3       572        1      1131       17        29     242 5527      3177 #> 4       572        1      1131       17        29     242 5527      3177 #> 5       572        1      1131       17        29     242 5527      3177 #> 6       572        1      1131       17        29     242 5527      3177 #> 7       572        1      1131       17        29     242 5527      3177 #> 8       572        1      1131       17        29     242 5527      3177 #> 9       572        1      1131       17        29     242 5527      3177 #> 10      572        1      1131       17        29     242 5527      3177 #>    vap_black vap_hisp vap_aian vap_asian vap_nhpi vap_other vap_two dots_type #> 1        439      531        1      1102       17        28     232  pop_nhpi #> 2        439      531        1      1102       17        28     232  pop_nhpi #> 3        439      531        1      1102       17        28     232  pop_nhpi #> 4        439      531        1      1102       17        28     232  pop_nhpi #> 5        439      531        1      1102       17        28     232  pop_nhpi #> 6        439      531        1      1102       17        28     232  pop_nhpi #> 7        439      531        1      1102       17        28     232  pop_nhpi #> 8        439      531        1      1102       17        28     232  pop_nhpi #> 9        439      531        1      1102       17        28     232  pop_nhpi #> 10       439      531        1      1102       17        28     232  pop_nhpi #>                    geometry #> 1  POINT (-7913715 5211458) #> 2  POINT (-7913715 5211630) #> 3  POINT (-7913543 5211630) #> 4  POINT (-7913715 5211802) #> 5  POINT (-7913543 5211802) #> 6  POINT (-7913715 5211974) #> 7  POINT (-7913543 5211974) #> 8  POINT (-7913371 5211974) #> 9  POINT (-7913715 5212146) #> 10 POINT (-7913543 5212146)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_regular.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Regular Points with sp — engine_sp_regular","title":"Generate Regular Points with sp — engine_sp_regular","text":"Uses sp::spsample() method \"regular\" produce points, converts back sf, spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_regular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Regular Points with sp — engine_sp_regular","text":"","code":"engine_sp_regular(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_regular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Regular Points with sp — engine_sp_regular","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_regular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Regular Points with sp — engine_sp_regular","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_regular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Regular Points with sp — engine_sp_regular","text":"","code":"set.seed(1) data('suffolk') engine_sp_regular(suffolk[16:20,], 'pop_nhpi') #> Simple feature collection with 22 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914948 ymin: 5206728 xmax: -7907975 ymax: 5212579 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                NAME  pop pop_white pop_black #> 1  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 2  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 3  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 4  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 5  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 6  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 7  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 8  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 9  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 10 25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #>    pop_hisp pop_aian pop_asian pop_nhpi pop_other pop_two  vap vap_white #> 1       572        1      1131       17        29     242 5527      3177 #> 2       572        1      1131       17        29     242 5527      3177 #> 3       572        1      1131       17        29     242 5527      3177 #> 4       572        1      1131       17        29     242 5527      3177 #> 5       572        1      1131       17        29     242 5527      3177 #> 6       572        1      1131       17        29     242 5527      3177 #> 7       572        1      1131       17        29     242 5527      3177 #> 8       572        1      1131       17        29     242 5527      3177 #> 9       572        1      1131       17        29     242 5527      3177 #> 10      572        1      1131       17        29     242 5527      3177 #>    vap_black vap_hisp vap_aian vap_asian vap_nhpi vap_other vap_two dots_type #> 1        439      531        1      1102       17        28     232  pop_nhpi #> 2        439      531        1      1102       17        28     232  pop_nhpi #> 3        439      531        1      1102       17        28     232  pop_nhpi #> 4        439      531        1      1102       17        28     232  pop_nhpi #> 5        439      531        1      1102       17        28     232  pop_nhpi #> 6        439      531        1      1102       17        28     232  pop_nhpi #> 7        439      531        1      1102       17        28     232  pop_nhpi #> 8        439      531        1      1102       17        28     232  pop_nhpi #> 9        439      531        1      1102       17        28     232  pop_nhpi #> 10       439      531        1      1102       17        28     232  pop_nhpi #>                    geometry #> 1  POINT (-7913715 5211458) #> 2  POINT (-7913715 5211630) #> 3  POINT (-7913543 5211630) #> 4  POINT (-7913715 5211802) #> 5  POINT (-7913543 5211802) #> 6  POINT (-7913715 5211974) #> 7  POINT (-7913543 5211974) #> 8  POINT (-7913371 5211974) #> 9  POINT (-7913715 5212146) #> 10 POINT (-7913543 5212146)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_stratified.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Stratified Points with sp — engine_sp_stratified","title":"Generate Stratified Points with sp — engine_sp_stratified","text":"Uses sp::spsample() method \"regular\" produce points, converts back sf, spatial joins input shp. engine function takes arguments produces comparable outputs. Final number points may approximate method.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_stratified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Stratified Points with sp — engine_sp_stratified","text":"","code":"engine_sp_stratified(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_sp_stratified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Stratified Points with sp — engine_sp_stratified","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_stratified.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Stratified Points with sp — engine_sp_stratified","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_sp_stratified.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Stratified Points with sp — engine_sp_stratified","text":"","code":"set.seed(1) data('suffolk') engine_sp_stratified(suffolk[16:20, ], 'pop_nhpi') #> Simple feature collection with 22 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7914076 ymin: 5206034 xmax: -7908214 ymax: 5212462 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                NAME  pop pop_white pop_black #> 1  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 2  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 3  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 4  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 5  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 6  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 7  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 8  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 9  25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #> 10 25025000408 0408, Suffolk County, Massachusetts 5671      3212       467 #>    pop_hisp pop_aian pop_asian pop_nhpi pop_other pop_two  vap vap_white #> 1       572        1      1131       17        29     242 5527      3177 #> 2       572        1      1131       17        29     242 5527      3177 #> 3       572        1      1131       17        29     242 5527      3177 #> 4       572        1      1131       17        29     242 5527      3177 #> 5       572        1      1131       17        29     242 5527      3177 #> 6       572        1      1131       17        29     242 5527      3177 #> 7       572        1      1131       17        29     242 5527      3177 #> 8       572        1      1131       17        29     242 5527      3177 #> 9       572        1      1131       17        29     242 5527      3177 #> 10      572        1      1131       17        29     242 5527      3177 #>    vap_black vap_hisp vap_aian vap_asian vap_nhpi vap_other vap_two dots_type #> 1        439      531        1      1102       17        28     232  pop_nhpi #> 2        439      531        1      1102       17        28     232  pop_nhpi #> 3        439      531        1      1102       17        28     232  pop_nhpi #> 4        439      531        1      1102       17        28     232  pop_nhpi #> 5        439      531        1      1102       17        28     232  pop_nhpi #> 6        439      531        1      1102       17        28     232  pop_nhpi #> 7        439      531        1      1102       17        28     232  pop_nhpi #> 8        439      531        1      1102       17        28     232  pop_nhpi #> 9        439      531        1      1102       17        28     232  pop_nhpi #> 10       439      531        1      1102       17        28     232  pop_nhpi #>                    geometry #> 1  POINT (-7913687 5211679) #> 2  POINT (-7913682 5211798) #> 3  POINT (-7913563 5211842) #> 4  POINT (-7913630 5211963) #> 5  POINT (-7913563 5211930) #> 6  POINT (-7913323 5211900) #> 7  POINT (-7913688 5212149) #> 8  POINT (-7913607 5212174) #> 9  POINT (-7913411 5212130) #> 10 POINT (-7913218 5212217)"},{"path":"http://christophertkenny.com/dots/reference/engine_terra.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Points with terra — engine_terra","title":"Generate Points with terra — engine_terra","text":"Uses terra::dots() produce points transforms back sf. engine function takes arguments produces comparable outputs.","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_terra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Points with terra — engine_terra","text":"","code":"engine_terra(shp, col)"},{"path":"http://christophertkenny.com/dots/reference/engine_terra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Points with terra — engine_terra","text":"shp input shp sf geometry. col character column name produce points ","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_terra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Points with terra — engine_terra","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/engine_terra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Points with terra — engine_terra","text":"","code":"set.seed(1) data('suffolk') engine_terra(suffolk, 'pop_nhpi') #> Simple feature collection with 281 features and 21 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7922420 ymin: 5198066 xmax: -7900122 ymax: 5227433 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>          GEOID                                                          NAME #> 1  25025000577 Chelsea City Ward 1 Precinct 2, Suffolk County, Massachusetts #> 2  25025000107                           0107, Suffolk County, Massachusetts #> 3  25025000107                           0107, Suffolk County, Massachusetts #> 4  25025000107                           0107, Suffolk County, Massachusetts #> 5  25025000107                           0107, Suffolk County, Massachusetts #> 6  25025000408                           0408, Suffolk County, Massachusetts #> 7  25025000408                           0408, Suffolk County, Massachusetts #> 8  25025000408                           0408, Suffolk County, Massachusetts #> 9  25025000408                           0408, Suffolk County, Massachusetts #> 10 25025000408                           0408, Suffolk County, Massachusetts #>     pop pop_white pop_black pop_hisp pop_aian pop_asian pop_nhpi pop_other #> 1  2151       152        82     1846        0        21        1        28 #> 2  3331       938        90     2027        6       115        4        51 #> 3  3331       938        90     2027        6       115        4        51 #> 4  3331       938        90     2027        6       115        4        51 #> 5  3331       938        90     2027        6       115        4        51 #> 6  5671      3212       467      572        1      1131       17        29 #> 7  5671      3212       467      572        1      1131       17        29 #> 8  5671      3212       467      572        1      1131       17        29 #> 9  5671      3212       467      572        1      1131       17        29 #> 10 5671      3212       467      572        1      1131       17        29 #>    pop_two  vap vap_white vap_black vap_hisp vap_aian vap_asian vap_nhpi #> 1       21 1532       117        63     1306        0        16        1 #> 2      100 2601       816        71     1509        6        83        4 #> 3      100 2601       816        71     1509        6        83        4 #> 4      100 2601       816        71     1509        6        83        4 #> 5      100 2601       816        71     1509        6        83        4 #> 6      242 5527      3177       439      531        1      1102       17 #> 7      242 5527      3177       439      531        1      1102       17 #> 8      242 5527      3177       439      531        1      1102       17 #> 9      242 5527      3177       439      531        1      1102       17 #> 10     242 5527      3177       439      531        1      1102       17 #>    vap_other vap_two                 geometry dots_type #> 1         12      17 POINT (-7907763 5219049)  pop_nhpi #> 2         35      77 POINT (-7908329 5217941)  pop_nhpi #> 3         35      77 POINT (-7908653 5218117)  pop_nhpi #> 4         35      77 POINT (-7908165 5217865)  pop_nhpi #> 5         35      77 POINT (-7907850 5217873)  pop_nhpi #> 6         28     232 POINT (-7913497 5211878)  pop_nhpi #> 7         28     232 POINT (-7913723 5211883)  pop_nhpi #> 8         28     232 POINT (-7913535 5211737)  pop_nhpi #> 9         28     232 POINT (-7913308 5212259)  pop_nhpi #> 10        28     232 POINT (-7913686 5212326)  pop_nhpi"},{"path":"http://christophertkenny.com/dots/reference/filter_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Points to a Region — filter_pts","title":"Filter Points to a Region — filter_pts","text":"Filter Points Region","code":""},{"path":"http://christophertkenny.com/dots/reference/filter_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Points to a Region — filter_pts","text":"","code":"filter_pts(pts, shp, cond = TRUE)"},{"path":"http://christophertkenny.com/dots/reference/filter_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Points to a Region — filter_pts","text":"pts points sf geometry filter shp shp filter cond geometry subset reduce shp ","code":""},{"path":"http://christophertkenny.com/dots/reference/filter_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Points to a Region — filter_pts","text":"tibble sf geometries","code":""},{"path":"http://christophertkenny.com/dots/reference/filter_pts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Points to a Region — filter_pts","text":"","code":"data(suffolk) pts <- dots_points(suffolk, pop, divisor = 1000) filter_pts(pts, suffolk, pop < 1000) #> Simple feature collection with 4 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7911735 ymin: 5203450 xmax: -7911489 ymax: 5214521 #> Projected CRS: WGS 84 / Pseudo-Mercator #>   pop dots_type                 geometry #> 1   1       pop POINT (-7911584 5203450) #> 2   1       pop POINT (-7911632 5214521) #> 3   1       pop POINT (-7911489 5209767) #> 4   1       pop POINT (-7911735 5208844)"},{"path":"http://christophertkenny.com/dots/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"http://christophertkenny.com/dots/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://christophertkenny.com/dots/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"http://christophertkenny.com/dots/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"http://christophertkenny.com/dots/reference/suffolk.html","id":null,"dir":"Reference","previous_headings":"","what":"Suffolk County, MA Voting Districts — suffolk","title":"Suffolk County, MA Voting Districts — suffolk","text":"data contains voting districts Suffolk County MA, geographies simplified.","code":""},{"path":"http://christophertkenny.com/dots/reference/suffolk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suffolk County, MA Voting Districts — suffolk","text":"","code":"data(\"suffolk\")"},{"path":"http://christophertkenny.com/dots/reference/suffolk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Suffolk County, MA Voting Districts — suffolk","text":"sf dataframe 295 observations","code":""},{"path":"http://christophertkenny.com/dots/reference/suffolk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suffolk County, MA Voting Districts — suffolk","text":"","code":"data('suffolk')"},{"path":"http://christophertkenny.com/dots/news/index.html","id":"dots-001","dir":"Changelog","previous_headings":"","what":"dots 0.0.1","title":"dots 0.0.1","text":"Added NEWS.md file track changes package. Creates dots() dots_points() create dot density plots points dot density plots. Creates engine functions point types terra, sf, sp. Creates water clipping via clip_water(). Creates point filtering via filter_pts(). Adds intro dot density vignette. Adds package logo. Adds tests testthat. Adds pkgdown site. Adds GitHub Actions run R CMD check.","code":""}]
